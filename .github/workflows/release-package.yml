name: Node.js Package

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'samples/**'
      - '.github/workflows/**'
      - '!.github/workflows/release-package.yml'
    tags:
      - '*'

  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checking out for ${{ github.ref }}
        uses: actions/checkout@v2

      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Run npx version-from-git --no-git-tag-version
        if: ${{ startsWith(github.ref, 'refs/heads/') }}
        run: npx version-from-git --no-git-tag-version

      - run: npm ci

      - run: npm run build --if-present

      - run: npm run test --if-present

      - name: Run npm pack
        run: npm pack

      - name: Upload npm-tarball
        uses: actions/upload-artifact@v2
        with:
          name: npm-tarball
          path: '*.tgz'

  publish:
    needs: build
    runs-on: ubuntu-20.04
    if: ${{ startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/') }}

    steps:
      - name: Download npm-tarball
        uses: actions/download-artifact@v2
        with:
          name: npm-tarball

      - name: Read package.json
        id: read-package-json
        run: |
          echo "::set-output name=name::$(tar xOf *.tgz package/package.json | jq -r '.name')"
          echo "::set-output name=version::$(tar xOf *.tgz package/package.json | jq -r '.version')"
          echo "::set-output name=tarball::$(ls *.tgz)"
          echo "::set-output name=date::$(date +%Y-%m-%d)"

      - name: Run npm publish ${{ steps.read-package-json.outputs.name }}@${{ steps.read-package-json.outputs.version }}
        run: |
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NODE_AUTH_TOKEN }}
          npm publish *.tgz --tag main

      - name: Run npm dist-tag add ${{ steps.read-package-json.outputs.name }}@${{ steps.read-package-json.outputs.version }} latest
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NODE_AUTH_TOKEN }}
          npm dist-tag add ${{ steps.read-package-json.outputs.name }}@${{ steps.read-package-json.outputs.version }} latest

      - name: Draft a new release
        uses: actions/create-release@v1
        id: create-release
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: '[${{ steps.read-package-json.outputs.version }}] - ${{ steps.read-package-json.outputs.date }}'
          draft: true

      - name: Upload tarball to release
        uses: actions/upload-release-asset@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./${{ steps.read-package-json.outputs.tarball }}
          asset_name: ${{ steps.read-package-json.outputs.tarball }}
          asset_content_type: application/octet-stream
